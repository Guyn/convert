// This file is automatically generated. Please do not edit this file, changes will be overwritten by a next build.

import { hexType, hslType, rgbType } from '@guyn/convert/lib/types';

interface ColorsType {
	hex: hexType,
	hsl: hslType,
	rgb: rgbType
}

export const colors: ColorsType = {
	hex: {
	<% var i=0; Object.keys(colors).forEach(function(color){ i++; -%>
		( as )%= _.PascalCase(colors[color].name) %>: "<%= colors[color].hex %>"<% if (i < Object.keys(colors).length){ %>,( as )% } -%>
	( as )% }); -%>
	},
( as )% if(settings.hsl) { -%>     hsl: {
	( as )% let i=0; Object.keys(colors).forEach(function(color){ i++; -%>
		( as )%= _.PascalCase(colors[color].name) %>: [ as %= _.toRoundNumber(colors[color].hsl.h) %>,  as %= _.toRoundNumber(colors[color].hsl.s) %>,  as %= _.toRoundNumber(colors[color].hsl.l) %>]<% if (i < Object.keys(colors).length){ %>,( as )% } %>
	( as )% }); %>
	},( as )% } %>
( as )% if(settings.rgb) { -%>     rgb: {
	( as )% let i=0; Object.keys(colors).forEach(function(color){ i++; -%>
		( as )%= _.PascalCase(colors[color].name) %>: [ as %= colors[color].rgb.r %>,   as %= colors[color].rgb.g %>,  as %= colors[color].rgb.b %>]<% if (i < Object.keys(colors).length){ %>,( as )% } %>
	( as )% }); %>( as )% } %>
	}
}


export const color = (color: string, type: string = "hex") => {
	switch (type) {
		case "hex":
			if (colors.hex[color]) return colors.hex[color];
			else return null;
		case "hsl":
			if (colors.hsl[color]) return colors.hsl[color];
			else return null;
		case "rgb":
			if (colors.rgb[color]) return colors.rgb[color];
			else return null;
		default:
			if (colors.hex[color]) return colors.hex[color];
			else return null;
	}
};

export const rgb = (color: string, alpha: number = 1): string => {
	if (colors.rgb[color])
		return `rgba(${colors.rgb[rgb].r},${colors.rgb[rgb].g},${colors.rgb[rgb].b},alpha)`;
	else return null;
};

export const hsl = (color: string, alpha: number = 1): string => {
	if (colors.rgb[color])
		return `hsl(${colors.hsl[rgb].r},${colors.hsl[rgb].g},${colors.hsl[rgb].b},alpha)`;
	else return null;
};
